{
  "_args": [
    [
      {
        "raw": "kang@^1.3.0",
        "scope": null,
        "escapedName": "kang",
        "name": "kang",
        "rawSpec": "^1.3.0",
        "spec": ">=1.3.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\suvo\\Desktop\\Project_drapan\\Project_Darpan\\jubi-solutions\\node_modules\\fast"
    ]
  ],
  "_from": "kang@^1.3.0",
  "_hasShrinkwrap": false,
  "_id": "kang@1.3.0",
  "_location": "/kang",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/kang_1.3.0_1565300837873_0.755243619559113"
  },
  "_npmUser": {
    "name": "trentm",
    "email": "trentm@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "kang@^1.3.0",
    "scope": null,
    "escapedName": "kang",
    "name": "kang",
    "rawSpec": "^1.3.0",
    "spec": ">=1.3.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fast"
  ],
  "_resolved": "https://registry.npmjs.org/kang/-/kang-1.3.0.tgz",
  "_shasum": "a2c83edf261e5bec4be8f88c169e93980ea2fd72",
  "_shrinkwrap": null,
  "_spec": "kang@^1.3.0",
  "_where": "C:\\Users\\suvo\\Desktop\\Project_drapan\\Project_Darpan\\jubi-solutions\\node_modules\\fast",
  "bin": {
    "kang": "./bin/kang.js"
  },
  "bugs": {
    "url": "https://github.com/joyent/kang/issues"
  },
  "dependencies": {
    "jsprim": "^1.4.0",
    "posix-getopt": "^1.2.0",
    "restify": "4.3.3",
    "strsplit": "^1.0.0",
    "vasync": "^1.6.4",
    "verror": "^1.9.0"
  },
  "description": "debugging for distributed systems",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-w1+5eDBwICFC3WH2U/l2Qjo7FMd8u0/A2psEPZxuK18/ChbJcRaHtZ6zni7kIzMe1UQSaj/K8WG8weA4IfC7TA==",
    "shasum": "a2c83edf261e5bec4be8f88c169e93980ea2fd72",
    "tarball": "https://registry.npmjs.org/kang/-/kang-1.3.0.tgz",
    "fileCount": 8,
    "unpackedSize": 38867,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdTJhmCRA9TVsSAnZWagAAOLYQAI+bQ8jDLxWNTTEKNs8t\n3WMoMii0r1DehGWt6PgIodGr4zcNkDFpCKLXs2npMj5fY93yGMyr9dIUY/+G\nUW/CaOgK2DenNUsjHRHYgikG6hmHJ82J70lqKrXVY03GktE0JLKSBRqut1OT\nbK6RFzHa+iw06fG9zSb9zP8EGU5LRjIQ+eHNZw9gJDgiuN3iscqMPraiXYnn\nRpJxnq9myVmPGzuGSEPvi6HHe9wfOXgXd+LyRFSfRySx9BCrN4k8uJ7totey\nvJrxonBUn2FSS7FwkgnSkCD+tcL+1bChR/nQR+QMBSzpoDf5juCpsnnfNpDO\nCxBuyR3LUsrGFn/DqcAGR92buWVJNm7iANXNx5ih7o8axOvizze9HGk+fz5T\nt+lHT0dWVPmZsJeyMP9IBsc+f/onjQtj+lzTnxlvqi4D6vzDLM4fbowhWi+X\n2REvIDChkjEz9yYGQtSNXkiODS8wXuO5RRfNIz+RRF8ItjlTKj+aYt+pMDrZ\ncmIQFhAopy3JaoecdUwj5hDyIITZyXEp48UbmPFtLc07o70/f8iTAgWLNXWC\nc71PZQ7h+/r5/27it3wr6SMV6XLy5YS77Nk+F8HRCeXot/bmHMYOETYuv54g\niTb8L44tfZ9YmlwLreKeOKEGo89//vZY6q6KhiuauinvGvl8AsFx/V8H/hVA\nl6Kb\r\n=aWU4\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10.x"
  },
  "files": [
    "bin",
    "lib"
  ],
  "gitHead": "bec4024c2ca8d60ced55f32453601cf46d14d568",
  "homepage": "https://github.com/joyent/kang#readme",
  "license": "MIT",
  "main": "./lib/kang.js",
  "maintainers": [
    {
      "name": "arekinath",
      "email": "alex@cooperi.net"
    },
    {
      "name": "dap",
      "email": "dap@cs.brown.edu"
    },
    {
      "name": "jclulow",
      "email": "josh@sysmgr.org"
    },
    {
      "name": "melloc",
      "email": "cody.mello@joyent.com"
    },
    {
      "name": "todd.whiteman",
      "email": "todd.whiteman@joyent.com"
    },
    {
      "name": "trentm",
      "email": "trentm@gmail.com"
    }
  ],
  "name": "kang",
  "optionalDependencies": {},
  "readme": "# kang: distributed system observability\n\nKang is a facility for debugging networked software services by exposing\ninternal state via a simple HTTP API.  Service state is organized into a\ntwo-level hierarchy of \"objects\" organized by \"type\".  For example, a simple\nHTTP server may have two types of objects: \"requests\" and \"connections\", and\nthere may be many objects of each type.  Each server defines its own types and\nthe structures of its objects.\n\n## Demo\n\nFirst, install the command-line tool:\n\n    # npm install -g kang\n\nThen run the example server in this repo:\n\n    # node examples/server.js\n    server listening at http://0.0.0.0:8080\n\nNow run the kang debugger:\n\n    # kang -hlocalhost:8080\n\nRun \"help\" for some suggested examples and try them out.\n\n\n## kang tool\n\nUsage: `kang [-h host1[host2...]]`\n\nRemote servers are specified using the following format:\n\n    [http[s]://]host[:port][/uri]\n\nAll fields other than the host are optional.  Nearly any combination may be\nspecified, as in:\n\n      REMOTE HOST              MEANS\n      localhost                http://localhost:80/status/snapshot\n      localhost:8080           http://localhost:8080/status/snapshot\n      localhost:8080/kang      http://localhost:8080/kang\n      https://localhost/kang   https://localhost:443/kang\n\nMultiple servers may be specified in a comma-separated list.  Servers are\nspecified using the -h option or (if none is present) the KANG\\_SOURCES\nenvironment variable.\n\nWhen you run `kang`, it creates a snapshot of the distributed system's state by\nquerying each of the servers.  You can browse the state interactively.  Type\n\"help\" for more information.\n\n## Background\n\nWhile interactive program execution is a useful feature during development, the\nmost important feature for debuggers in both development and production\nenvironments is the presentation of current program state.  Program state is\noften examined on an ad-hoc basis by engineers debugging a particular problem,\nbut it's often useful to build tools to automatically analyze this state as\nwell, either to summarize it for humans or to automatically look for certain\nclasses of problems.  In this regard, kang is a debugger for distributed\nsystems: it fetches, aggregates, and presents program state for consumption by\nboth humans and automated tools.  The goal is to allow each component of the\ndistributed system to describe the objects it knows about (and potentially a\nsmall amount of metadata suggesting what to do with this information) so that\nthe kang system can fetch, aggregate, and present this information usefully.\n\nIn debugging distributed systems of heterogeneous components, it's critical to\nbe able to quickly understand the internal state of each component. We have\n[https://github.com/trentm/node-bunyan](logs) and\n[https://github.com/joyent/node-panic](dumps) to understand explicit errors and\nfatal failures, but you need more to understand why a service is simply\nbehaving wrong.\n\nMost of the time, the internal state takes the form of just a few important\ntypes of objects. It would be really useful if each service provided a standard\nway of extracting this state for the purpose of debugging.\n\n## API\n\nkang defines a single HTTP entry point, `/kang/snapshot`, that returns a\nsnapshot of the service's internal state in the form of a JSON object that\nlooks like this:\n\n    {\n            /* service identification information */\n            \"service\": {\n                    \"name\": \"ca\",\n                    \"component\": \"configsvc\",\n                    \"ident\": \"us-sw-1.headnode\",\n                    \"version\": \"0.1.0vmaster-20120126-2-g92bf718\"\n            },\n\n            /* arbitrary service stats */\n            \"stats\": {\n                    \"started\": \"2012-03-20T17:03:59.221Z\",\n                    \"uptime\": 86403217,\n                    \"memory\": {\n                            \"rss\": 10850304,\n                            \"heaptotal\": 2665280,\n                            \"heapused\": 1700788\n                    },\n                    \"http\": {\n                        \"nrequests\": 1709,\n                        \"nrequestsbycode\": {\n                          \"200\": 1705,\n                          \"201\": 1,\n                          \"204\": 1,\n                          \"503\": 1\n                        }\n                    }\n            },\n\n            /* extra service-specific information */\n            \"types\": [ 'instrumentation', 'instrumenter' ],\n\n            \"instrumentation\": {\n                    \"cust:12345;1\": {\n\t\t\t    \"creation_time\": \"2012-01-26t19:20:30.450z\",\n\t\t\t    \"label\": \"12345/1\"\n                            \"module\": \"node\",\n                            \"stat\": \"httpd_ops\",\n                            \"decomposition\": \"latency\",\n                            \"granularity\": 1,\n                            \"instrumenters\": {\n                                    \"instrumenter:instr1\": \"enabled\",\n                                    \"instrumenter:instr2\": \"enabled\",\n                                    \"instrumenter:instr3\": \"disabled\"\n                            }\n                    }\n            },\n\n            \"instrumenter\": {\n                    \"instr1\": {\n                            \"creation_time\": \"2012-01-26t19:20:30.450z\",\n                            \"instrumentations\": [ \"instrumentation:cust:12345;1\" ],\n                            \"last_contact\": \"2012-01-26t19:20:30.450z\"\n                    },\n                    \"instr2\": {\n                            \"creation_time\": \"2012-01-26t19:20:30.450z\",\n                            \"instrumentations\": [ \"instrumentation:cust:12345;1\" ],\n                            \"last_contact\": \"2012-01-26t19:20:30.450z\"\n                    },\n                    \"instr3\": {\n                            \"creation_time\": \"2012-01-26t19:20:30.450z\",\n                            \"instrumentations\": [ ],\n                            \"last_contact\": \"2012-01-10t19:20:30.450z\"\n                    }\n            }\n    }\n\nNote that many of the above field names match the corresponding fields used in\nBunyan for logging.  Clients can link objects reported by multiple components\n(or even services) by assuming any given (type, id) tuple is unique.  Clients\ncan also link any string of the form \"type:id\" (for a known object type and id)\nto the corresponding object.  For example, the \"instrumenter:instr1\" key in the\ninstrumentation above can be linked directly to that object.\n\nIn the future we may define semantics for some fields like \"label\", and\n\"creation\\_time\" so that the tools can present this information more usefully.\n\n## Server library\n\nkang includes a server library for implementing the above API.  Any project that\nwants to take advantage need only implement a few entry points:\n\n* report service identification information\n* report stats\n* list object types\n* list objects for a given type\n* serialize one object\n\nServices can add information incrementally as desired.  The library takes care\nof formatting this data appropriately.\n\n## Client library\n\nkang includes a client library for listing and browsing objects from a set of\nservices.  See cmd/kang.js for example usage.\n\n## CLI\n\nSee above for details.\n\n## Future work\n\n- Remove prefixes on library function names\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/joyent/kang.git"
  },
  "version": "1.3.0"
}
